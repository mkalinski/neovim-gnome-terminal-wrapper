#!/usr/bin/python3

"""Run nvim inside gnome-terminal"""

import sys
import os
import subprocess
import dbus
from itertools import chain
from time import time


APP_ID = 'org.neovim'
CLASS = 'neovim'
NAME = 'Neovim'

SERVER_CMD = (
    '/usr/libexec/gnome-terminal-server',
    '--app-id', APP_ID,
    '--class', CLASS,
    '--name', NAME,
)
TERM_CMD = (
    'gnome-terminal',
    '--app-id', APP_ID,
    '--class', CLASS,
    '--name', NAME,
    '--hide-menubar',
    '-x',
    'nvim',
)
GTERM_PASSTHROUGH_OPTIONS = frozenset((
    '--full-screen',
    '--maximize',
    '--profile',
    '--geometry',
    '--working-directory',
    '--display',
))


def processArgv():
    argv = sys.argv[1:]
    gtermOptions = []
    nvimOptions = []

    for arg in argv:
        argParts = arg.split('=', 1)
        if argParts[0] in GTERM_PASSTHROUGH_OPTIONS:
            gtermOptions.append(arg)
        else:
            nvimOptions.append(arg)

    # launch the wrapper in the current directory by default
    if not any(o.startswith('--working-directory') for o in gtermOptions):
        gtermOptions.append('--working-directory='+os.path.abspath(os.curdir))

    return gtermOptions, nvimOptions


def main():
    """Run nvim inside gnome-terminal"""
    session_bus = dbus.SessionBus()

    # launch the terminal server with a custom app-id
    # and window class (so the .desktop file gets associated)
    if not session_bus.name_has_owner(APP_ID):
        subprocess.Popen(SERVER_CMD)

    # wait until the name is registered, or 2 seconds pass (when launching from
    # cold cache it might take more time)
    timeout = time() + 2
    while not session_bus.name_has_owner(APP_ID) and time() <= timeout:
        pass
    # launch nvim in a gnome-terminal instance
    if session_bus.name_has_owner(APP_ID):
        gtermOptions, nvimOptions = processArgv()
        cmd = tuple(chain(TERM_CMD[:-2],
                          gtermOptions,
                          TERM_CMD[-2:],
                          nvimOptions))
        with open(os.devnull, 'wb') as fnull:
            subprocess.Popen(cmd,
                             stdout=fnull,
                             stderr=fnull)


if __name__ == '__main__':
    main()
